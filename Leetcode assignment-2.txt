Leetcode assignment-2

1. class Solution {
    public String longestCommonPrefix(String[] strs) {
        Arrays.sort(strs);
        int n = strs.length;
        String first = strs[0];
        String last = strs[n-1];
        String ans = "";

        int minSize = Math.min(first.length(), last.length());

        for(int i=0; i<minSize; i++){
            if(first.charAt(i)!=last.charAt(i)) return ans;
            else ans+=first.charAt(i);
        }
        return ans;
    }
}

2. class Solution {
    public int strStr(String haystack, String needle) {
        int idx = haystack.indexOf(needle);
        return idx;
    }
}

3. class Solution {
    public int firstUniqChar(String s) {
        HashMap<Character, Integer> freqMap = new HashMap<>();
        for(char c:s.toCharArray()){
            freqMap.put(c, freqMap.getOrDefault(c, 0)+1);
        }
        for(int i=0; i<s.length(); i++){
            if(freqMap.get(s.charAt(i))==1) return i;
        }
        return -1;
    }
}

5) Sort Array by Increasing Frequency
import java.util.*;

public class Solution {
    public int[] frequencySort(int[] nums) {
        // Step 1: Count the frequency of each number
        Map<Integer, Integer> freqMap = new HashMap<>();
        for (int num : nums) {
            freqMap.put(num, freqMap.getOrDefault(num, 0) + 1);
        }

        
        Integer[] boxed = Arrays.stream(nums).boxed().toArray(Integer[]::new);

        
        Arrays.sort(boxed, (a, b) -> {
            int freqA = freqMap.get(a);
            int freqB = freqMap.get(b);
            if (freqA != freqB) {
                return freqA - freqB;               
            } else {
                return b - a;                       
            }
        });

        
        return Arrays.stream(boxed).mapToInt(Integer::intValue).toArray();
    }
}


6)
public class Solution {
    public int[] relativeSortArray(int[] arr1, int[] arr2) {
        int[] count = new int[1001];  
        for (int num : arr1) {
            count[num]++;
        }
        
        int index = 0;
        
        for (int num : arr2) {
            while (count[num] > 0) {
                arr1[index++] = num;
                count[num]--;
            }
        }
       
        for (int num = 0; num < count.length; num++) {
            while (count[num] > 0) {
                arr1[index++] = num;
                count[num]--;
            }
        }
        return arr1;
    }
}


7)
class Solution {
    
    public int[] sortArrayByParityII(int[] nums) {
        for (int i = 0, j = 1; i < nums.length; i += 2) {
            if (nums[i] % 2 != 0) {             
                while (nums[j] % 2 != 0) {     
                    j += 2;
                }
                int t = nums[i];
                nums[i] = nums[j];
                nums[j] = t;
            }
        }
        return nums;
    }
}


8)
Regular Expression Matching

public class Solution {
    public boolean isMatch(String s, String p) {
        int m = s.length(), n = p.length();
        boolean[][] dp = new boolean[m + 1][n + 1];
        
        dp[0][0] = true;
        
        for (int j = 1; j <= n; j++) {
            if (p.charAt(j - 1) == '*') {
                dp[0][j] = dp[0][j - 2];
            }
        }
        
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                char pc = p.charAt(j - 1), sc = s.charAt(i - 1);
                
                if (pc == sc || pc == '.') {
                    dp[i][j] = dp[i - 1][j - 1];
                }
                else if (pc == '*') {
                    
                    dp[i][j] = dp[i][j - 2];
                
                    char prev = p.charAt(j - 2);
                    if (prev == sc || prev == '.') {
                        dp[i][j] |= dp[i - 1][j];
                    }
                }
            }
        }
        
        return dp[m][n];
    }
}

9) Integer to Roman
class Solution {
    public String intToRoman(int num) {
        String[] symbols = {"M", "CM", "D", "CD", "C", "XC", "L", "XL", "X", "IX", "V", "IV", "I"};
        int[] values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};

        StringBuilder res = new StringBuilder();

        for(int i=0; i< symbols.length; i++){
            while(num>=values[i]){
                res.append(symbols[i]);
                    num -= values[i];
                }
            }
        return res.toString();    
    }
}

10) Roman to Integer
class Solution {
    public int romanToInt(String s) {
        Map<Character, Integer> map = new HashMap<>();
        String cs = "IVXLCDM";
        int[] vs = {1, 5, 10, 50, 100, 500, 1000};
        for (int i = 0; i < cs.length(); i++) {
            map.put(cs.charAt(i), vs[i]);
        }

        int ans = map.get(s.charAt(s.length() - 1));
        for (int i = 0; i < s.length() - 1; ++i) {
            int current = map.get(s.charAt(i));
            int next = map.get(s.charAt(i + 1));
            ans += (current < next) ? -current : current;
        }
        return ans;
    }
}
